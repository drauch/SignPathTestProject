# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
 - none

pool:
  vmImage: 'windows-2019'

steps:
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.csproj'

- task: SignPathSubmitSigningRequest@3
  inputs:
    waitForCompletion: 'sync'
    inputArtifactPath: 'SignPathTestProject/bin/Debug/netstandard2.0/SignPathTestProject.dll'
    organizationId: 'b5c891d7-d62e-4abb-9b2d-0134612e1b1a'
    projectName: 'SignPathTestProject'
    signingPolicyName: 'test-signing'
    outputArtifactPath: '$(Build.ArtifactStagingDirectory)/SignPathTestProject.dll'
    allowOverwriting: false
    ciUserToken: '$(CIUserToken)'
    inputArtifactDescription: 'test desc'
    apiUrl: 'https://app.signpath.io/api/'

- task: SignPathSubmitSigningRequest@3
  inputs:
    waitForCompletion: 'async'
    inputArtifactPath: 'SignPathTestProject/bin/Debug/netstandard2.0/SignPathTestProject.dll'
    organizationId: 'b5c891d7-d62e-4abb-9b2d-0134612e1b1a'
    projectName: 'SignPathTestProject'
    signingPolicyName: 'test-signing'
    artifactConfigurationName: 'Default'
    outputVariableName: 'SigningRequestId'
    ciUserToken: '$(CIUserToken)'
    apiUrl: 'https://app.signpath.io/api/'

- task: SignPathDownloadSignedArtifact@3
  inputs:
    organizationId: 'b5c891d7-d62e-4abb-9b2d-0134612e1b1a'
    signingRequestId: '$(SigningRequestId)'
    outputArtifactPath: '$(Build.ArtifactStagingDirectory)/SignPathTestProject.dll'
    ciUserToken: '$(CIUserToken)'
    allowOverwriting: true
    apiUrl: 'https://app.signpath.io/api/'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/SignPathTestProject.dll'
    artifact: 'SignPathTestProject Library'
